import numpy.polynomial.polynomial as poly
import matplotlib.pyplot as plt
import numpy as np
import find_roots
import algebra
import pretty


def solve(lamb, n, beta, delta):
    """Find the solution to  M x = ((n + 1) * (1 - beta * lamb), 0, ..., 0)^T,  where
    M [i, j] = \\tilde f_j(\\hat z_i)  for  i, j = 0, ..., n,
    \\tilde f_j(z) = (z^j + ... + z^n),  and  \\hat z_0 = 1, \\hat z_1, ..., \\hat z_n  are the zeroes of
    z^(n+1) - (lamb * z + 1 - lamb)^(beta*(n + 1))  inside the unit circle.
    Also find the solution to  \\bar M x = ((n + 1) * (1 - beta * lamb), 0, ..., 0)^T,  where
    \\bar M [0, j] = \\tilde f_j(1),  \\bar M [i, j] = \\tilde F_j,(i-1)  --- the (i - 1, n) transformation of
    \\tilde f_j(z).
    To find the zeroes, use (16) from Janssen & van Leeuwaarden (2008) with an error at most  'delta'."""

    roots = find_roots.find_binomial_roots(lamb, n + 1, beta, delta)
    roots = roots[1:]  # remove 1 from the roots
    functions = [[0] * j + [1.] * (n + 1 - j) for j in range(n + 1)]  # functions \\tilde f_j(z)
    first_row = [sum(function) for function in functions]  # sum(polynomial) is equal to value at 1
    right_coefficient = (n + 1) * (1 - lamb * beta)
    xs = algebra.find_coefficients(roots, functions, first_row, right_coefficient)
    xs_bar = algebra.find_coefficients_bar(roots, functions, first_row, right_coefficient)

    # D(z) = z^(n+1) - (lamb * z + 1 - lamb)^(beta*(n + 1))
    denominator = poly.polysub([0] * (n + 1) + [1], poly.polypow([1 - lamb, lamb], beta * (n + 1)))
    xs_bar_integral = algebra.find_coefficients_bar_integral(denominator, functions, first_row, right_coefficient,
                                                             delta)
    return xs, xs_bar, xs_bar_integral


def solve_explicitly_beta_2(lamb, n):
    """Return the solution of  Mx = ((n + 1) * (1 - 2 * lamb), 0, ..., 0)^T, which is given by
    x_k = (n + 1) * (1 - 2 * lamb)  * ((-1)^(n-k) * sigma_{n-k} - (-1)^(n-k+1) * sigma_{n-k+1}) /
          (\\sum_{j=0}^n (-1)^(n-j) * sigma_{n-j}),
    where  sigma_j = sigma_j(\\hat z_1, ..., \\hat z_n),
    \\hat z_0 = 1, \\hat z_1, ..., \\hat z_n  are the zeroes of  z^(n+1) - (lamb * z + 1 - lamb)^(2 * (n + 1))
    inside the unit circle, found explicitly.
    """
    roots = find_roots.find_binomial_roots_beta_2(lamb, n + 1)
    roots = roots[1:]  # remove \\hat z_0 = 1.
    sigmas_with_signs = np.concatenate((algebra.find_sigmas_with_signs_from_roots(roots), [0.]))
    norm_coefficient = (n + 1) * (1. - 2 * lamb) / sum(sigmas_with_signs)
    xs = [norm_coefficient * (sigmas_with_signs[n-k] - sigmas_with_signs[n - k + 1]) for k in range(n + 1)]
    return xs


def find_max_difference(array_1, array_2):
    """Find the maximum absolute difference between array_1[j] and array_2[j]."""
    return max([abs(array_1[j] - array_2[j]) for j in range(len(array_1))])


def compare_solutions_beta_2(lamb, n, delta):
    """Compare the solutions using matrices M, \\bar M (computed using roots or integrals) and the explicit solution."""
    xs_m, xs_m_bar, xs_integral = solve(lamb, n, 2, delta)
    xs = solve_explicitly_beta_2(lamb, n)
    return [find_max_difference(xs_m, xs), find_max_difference(xs_m_bar, xs), find_max_difference(xs_integral, xs)]


def plot_results(results, ns_plus1, lambs):
    """Plot the results."""
    ax, lw, fontsize = pretty.top(10, 0.75)  # create a figure of size 10cm x 7.5cm
    colours = [pretty.utgreen, pretty.utyellow, pretty.utred]
    markers = ["v", "o", "^"]

    for index, lamb in enumerate(lambs):
        plt.plot(ns_plus1, [y[0] for y in results[lamb]], "-", marker=markers[index], markevery=3, ms=5,
                 label=r"$(a)$, $\lambda=" + pretty.pretty_float(lamb) + "$", lw=lw, color=colours[index])
        plt.plot(ns_plus1, [y[1] for y in results[lamb]], "--", marker=markers[index], markevery=3, ms=5,
                 label=r"$(b)$, $\lambda=" + pretty.pretty_float(lamb) + "$", lw=lw, color=colours[index])
        plt.plot(ns_plus1, [y[2] for y in results[lamb]], "-.", marker=markers[index], markevery=3, ms=5,
                 label=r"$(c)$, $\lambda=" + pretty.pretty_float(lamb) + "$", lw=lw, color=colours[index])
    plt.yscale("log")  # logarithmic scale of the error
    plt.legend(loc="upper left", bbox_to_anchor=(1, 1), numpoints=2, markerscale=0.8)
    # save figure:
    pretty.bottom_axes(ax, fontsize, 10, 40, 10 ** (-16), 10 ** 2, r"$Batch\ size\ n+1$", r"$Error$", "Results_10.pdf")
    plt.show()


# main:
lambs = [0.3, 0.4, 0.45]
ns = range(9, 40)
results = {lamb: [] for lamb in lambs}
for lamb in lambs:
    print(lamb)
    for n in ns:
        results[lamb].append(compare_solutions_beta_2(lamb, n, 10 ** (-10)))

print(results)
# results for delta = 10 ** (-10):
# results = {0.3: [[3.2321064322052165e-11, 3.224906455094588e-11, 1.0359118077883465e-14], [2.7458705347945612e-11, 2.759511370738978e-11, 1.0419562398958175e-14], [3.961118919490506e-11, 3.9541842025055123e-11, 3.594386541208386e-15], [1.3560514109860685e-10, 1.352368703227441e-10, 8.638936600916311e-15], [3.815342442346576e-11, 3.9901679183476685e-11, 1.5503874226458215e-14], [1.1861198617577414e-10, 1.205242017356204e-10, 2.9378138377288156e-14], [4.081251905871239e-11, 4.102615470002225e-11, 2.096375373651265e-14], [1.0605838801932963e-10, 8.000553865811659e-11, 1.291913353644917e-13], [1.768620171928753e-10, 8.441647728080234e-11, 1.1687382290259182e-13], [7.84033065320348e-10, 4.651262713067925e-11, 4.865289984024777e-13], [1.92963189807431e-09, 7.973429040155241e-11, 1.7695796271453936e-13], [7.888958812759938e-09, 1.9460652534444805e-10, 2.6053354487904376e-13], [2.924004148228319e-09, 9.224055242497247e-11, 6.804539892035949e-13], [9.564323639898628e-09, 6.383123200413561e-11, 4.999724643491219e-13], [1.3373729121468524e-07, 7.591627937335337e-11, 4.695200904255146e-12], [5.241765960767081e-07, 8.805467336654574e-11, 1.0847032184353652e-11], [4.538065955133658e-07, 3.3293104297760183e-10, 1.1374618919741036e-11], [1.6837637873766613e-06, 1.6084654268223432e-10, 1.2057234286780728e-11], [5.659538808840213e-07, 1.114198040142074e-10, 1.1616608008505188e-11], [2.7825249084886393e-05, 8.953144373326974e-11, 1.2427166405843716e-11], [0.00010048462501459944, 7.622177721636196e-11, 3.322913831926091e-11], [0.00025523481841452914, 8.359531166335903e-11, 2.7526135230322967e-11], [0.0002646213452468591, 8.981343843555428e-11, 7.122294367850233e-11], [0.002797877112294113, 9.287325966747313e-11, 1.5026062205793608e-10], [0.0057331860751897255, 9.43782318445491e-11, 2.580902099574502e-10], [0.011002003825582165, 3.797254737222083e-10, 4.127354694570771e-10], [0.03197944502526638, 2.428290738855774e-10, 3.1761252076088266e-10], [0.20054898046072916, 1.8786182085384651e-10, 4.092261927818068e-10], [0.3523885082011572, 1.5529065061279408e-10, 1.3398954133665975e-09], [2.04129123572288, 1.3743710005522873e-10, 1.4239787232341531e-09], [2.2498877754645448, 1.2520864687164972e-10, 3.838006983123901e-09]], 0.4: [[4.750534286981739e-12, 4.669736848682032e-12, 5.362897626688525e-15], [9.591239591120949e-12, 1.1280393286463231e-11, 5.16565415517217e-15], [1.6304242120966357e-11, 7.000844349585293e-12, 8.164909720623907e-15], [2.698279947628484e-11, 2.2179008635270297e-11, 1.6691417806340472e-14], [1.532014983100342e-10, 9.715742104069881e-12, 2.338504897927643e-14], [4.603154891995134e-10, 1.1690343151436514e-11, 3.4850597173472915e-14], [6.776297310968533e-10, 2.92652985402096e-11, 2.3312813268421553e-14], [2.470061621502381e-09, 6.6410488267262666e-12, 8.835428391962806e-14], [3.348247860748911e-08, 2.8740163061798004e-11, 1.1164438844645194e-13], [3.882027332414336e-08, 2.8589158821540663e-11, 1.6174030878447943e-13], [1.5214912644126714e-07, 2.202447947359013e-11, 3.764398020525932e-13], [3.570552860263054e-06, 2.4184917957697792e-11, 4.597604551026574e-13], [9.24057968718056e-06, 3.5722327873740735e-11, 7.994599008899961e-13], [2.4487567467796644e-05, 3.762672118536386e-11, 3.1636620162601214e-13], [5.372998498076456e-05, 1.951974693052499e-11, 4.03122530925768e-12], [0.0002461595472198406, 1.7273404968464137e-11, 1.02745352704027e-11], [0.0005903003235453682, 5.592352970660617e-11, 1.1419863287110232e-11], [0.00961220932658528, 1.5059342679125098e-11, 1.0719012829409827e-11], [0.04631747120852883, 4.012795651343946e-11, 1.087847739042272e-11], [0.2783436122480668, 2.281647790230202e-11, 1.8712915074131783e-11], [0.30164764285772183, 4.494481879295656e-11, 3.742518431822671e-11], [3.1618033379262034, 1.6556554741153932e-11, 2.4151395120281644e-11], [14.304625115511373, 7.380171473951516e-11, 4.643876581535898e-11], [3.709858378835864, 2.2400251358830398e-11, 1.5000806839140814e-10], [6.7302266389897065, 3.840072717156462e-11, 2.175442617448371e-10], [6.333294943122072, 5.7446741809041025e-11, 3.2130610712954554e-10], [10.14539399953787, 2.1489325360734644e-11, 3.456665665357462e-10], [5.421848179798945, 4.064735353886655e-11, 1.0391813576209764e-09], [8.241205343561742, 7.878118645061637e-11, 1.1690334258180228e-09], [11.953291411536098, 3.1431166319245617e-11, 1.2022002230183847e-09], [6.940968448403511, 2.5527625502614806e-11, 5.34931284840534e-09]], 0.45: [[3.669973886980091e-12, 1.4898638110589783e-12, 2.0941187032585636e-15], [6.48139650960393e-12, 1.3878898123589994e-12, 3.525982333919252e-15], [3.7239057163904026e-11, 8.328060602872289e-13, 2.9144303373409335e-15], [8.600176920230948e-11, 1.9338697315593815e-12, 2.4921234413910794e-15], [2.2875892479041395e-10, 8.028577902459066e-13, 4.662187949357974e-15], [3.1134891284165135e-09, 3.4275776677103954e-12, 2.845868178327716e-15], [1.1697476136559977e-08, 3.998176822640301e-12, 4.738466678068028e-15], [2.666291869558643e-08, 2.822603262250557e-12, 4.8018223649639096e-15], [1.267685353560072e-07, 6.618844361519067e-12, 3.325022565306254e-15], [9.187619147609707e-07, 2.0622392805611687e-12, 4.524959000167427e-15], [3.4090949781809825e-06, 5.8631850304744684e-12, 5.1562158704546465e-15], [3.603941482125355e-05, 2.927533215866179e-12, 6.7209226804257505e-15], [2.6796971893028244e-05, 5.758227279755198e-12, 6.9676875184001466e-15], [0.0001835567945963846, 3.4540426669750802e-12, 1.1408510915104375e-14], [0.0009248232742362577, 5.325018214131758e-12, 4.8312625520384957e-14], [0.03360318774001702, 8.30963077892432e-12, 7.622414501598299e-14], [0.10385835201674685, 3.4000025800423197e-12, 8.840981760550487e-14], [0.2085475551828222, 3.064645954338178e-12, 8.621782552489776e-14], [7.241875037642518, 6.1940036792217305e-12, 9.22982965248286e-14], [4.8229927982618594, 5.780556589094293e-12, 9.823303851067235e-14], [11.236383779361361, 1.913387436656787e-12, 1.1277053806255095e-13], [2.1117217303234677, 5.4224402973650976e-12, 1.1488200913446398e-13], [3.431984847832112, 1.1838294235264786e-11, 1.1308582913679516e-13], [11.519770008291577, 3.667372056734502e-12, 2.0691550762513571e-13], [1.7893393368218689, 1.1006931554525392e-11, 3.684365416875496e-13], [2.7136825936588926, 8.882839132433156e-12, 8.981711348014907e-13], [11.830581988790543, 3.5129830255763304e-12, 6.730536044601313e-13], [6.0019272793535405, 6.061873250865071e-12, 5.721784244181485e-13], [1.5747024567135905, 1.11866354773798e-11, 5.067846660174584e-13], [4.419044514320881, 1.4477433249371816e-11, 1.4311606678312333e-12], [5.564189534793082, 1.5912674168570664e-11, 2.854856792497191e-12]]}

plot_results(results, [n + 1 for n in ns], lambs)
